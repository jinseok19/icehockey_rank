const { executeQuery } = require('../config/database');

// ÏãúÎìú Îç∞Ïù¥ÌÑ∞ - Ïã§Ï†ú ÌîÑÎ°†Ìä∏ÏóîÎìú Îç∞Ïù¥ÌÑ∞ÏôÄ ÏùºÏπò
const seedData = {
    teams: [
        {
            team_name: 'Î†àÏò§ÌååÏ¶à',
            full_name: 'ÏÑúÏö∏ Î†àÏò§ÌååÏ¶à',
            region: 'ÏÑúÏö∏',
            age_group: 'U15',
            home_venue: 'ÏÑúÏö∏ ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'ÏÑúÏö∏ ÏßÄÏó≠ÏùÑ ÎåÄÌëúÌïòÎäî Í∞ïÎ†•Ìïú U15 ÌåÄ',
            coach: 'ÍπÄÏ≤†Ïàò',
            captain: 'Î∞ïÎØºÏàò',
            founded: '2018-01-01',
            colors: JSON.stringify(['#2D6CF6', '#FFFFFF'])
        },
        {
            team_name: 'ÌÉÄÏù¥Í±∞Ïä§',
            full_name: 'Î∂ÄÏÇ∞ ÌÉÄÏù¥Í±∞Ïä§',
            region: 'Î∂ÄÏÇ∞',
            age_group: 'U18',
            home_venue: 'Î∂ÄÏÇ∞ ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'Î∂ÄÏÇ∞ ÏßÄÏó≠ ÏµúÍ≥†Ïùò U18 ÌåÄÏúºÎ°ú Í∞ïÎ†•Ìïú ÏàòÎπÑÎ•º ÏûêÎûë',
            coach: 'Ïù¥ÏòÅÏàò',
            captain: 'ÏµúÏ§ÄÌò∏',
            founded: '2016-01-01',
            colors: JSON.stringify(['#FF6B35', '#000000'])
        },
        {
            team_name: 'Ïù¥Í∏ÄÏä§',
            full_name: 'ÎåÄÍµ¨ Ïù¥Í∏ÄÏä§',
            region: 'ÎåÄÍµ¨',
            age_group: 'U12',
            home_venue: 'ÎåÄÍµ¨ ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'ÎåÄÍµ¨ ÏßÄÏó≠Ïùò Ïú†ÎßùÌïú U12 ÌåÄÏúºÎ°ú Îπ†Î•∏ ÏÑ±Ïû•ÏÑ∏',
            coach: 'Î∞ïÏßÄÏÑ±',
            captain: 'ÍπÄÌÉúÌòÑ',
            founded: '2020-01-01',
            colors: JSON.stringify(['#20C997', '#FFFFFF'])
        },
        {
            team_name: 'Î≤†Ïñ¥Ïä§',
            full_name: 'Ïù∏Ï≤ú Î≤†Ïñ¥Ïä§',
            region: 'Ïù∏Ï≤ú',
            age_group: 'U15',
            home_venue: 'Ïù∏Ï≤ú ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'Ïù∏Ï≤ú ÏßÄÏó≠Ïùò Í∑†ÌòïÏû°Ìûå U15 ÌåÄ',
            coach: 'Ï†ïÎØºÌò∏',
            captain: 'Ïù¥ÎèôÌòÑ',
            founded: '2019-01-01',
            colors: JSON.stringify(['#8B4513', '#FFFFFF'])
        },
        {
            team_name: 'ÏÉ§ÌÅ¨Ïä§',
            full_name: 'Ïö∏ÏÇ∞ ÏÉ§ÌÅ¨Ïä§',
            region: 'Ïö∏ÏÇ∞',
            age_group: 'U10',
            home_venue: 'Ïö∏ÏÇ∞ ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'Ïö∏ÏÇ∞ ÏßÄÏó≠Ïùò Ï†äÏùÄ U10 ÌåÄÏúºÎ°ú Í∏∞Î≥∏Í∏∞ Ï§ëÏãú',
            coach: 'ÍπÄÏàòÏßÑ',
            captain: 'Î∞ïÏÜåÏó∞',
            founded: '2021-01-01',
            colors: JSON.stringify(['#1E3A8A', '#FFFFFF'])
        },
        {
            team_name: 'ÎìúÎûòÍ≥§Ïä§',
            full_name: 'Í¥ëÏ£º ÎìúÎûòÍ≥§Ïä§',
            region: 'Í¥ëÏ£º',
            age_group: 'U18',
            home_venue: 'Í¥ëÏ£º ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'Í¥ëÏ£º ÏßÄÏó≠Ïùò Ï†ÑÌÜµÏûàÎäî U18 ÌåÄÏúºÎ°ú Í∞ïÎ†•Ìïú Í≥µÍ≤©Î†•',
            coach: 'ÏµúÏòÅÏ≤†',
            captain: 'ÍπÄÏÑ±ÎØº',
            founded: '2017-01-01',
            colors: JSON.stringify(['#DC2626', '#FFD700'])
        },
        {
            team_name: 'ÎùºÏù¥Ïò®Ïä§',
            full_name: 'ÎåÄÏ†Ñ ÎùºÏù¥Ïò®Ïä§',
            region: 'ÎåÄÏ†Ñ',
            age_group: 'U12',
            home_venue: 'ÎåÄÏ†Ñ ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'ÎåÄÏ†Ñ ÏßÄÏó≠Ïùò ÏÉàÎ°úÏö¥ U12 ÌåÄÏúºÎ°ú Í∏∞Î≥∏Í∏∞ Ï§ëÏãú',
            coach: 'Ïù¥ÎØºÏàò',
            captain: 'ÍπÄÏ§ÄÌò∏',
            founded: '2022-01-01',
            colors: JSON.stringify(['#FFD700', '#000000'])
        },
        {
            team_name: 'ÌåîÏΩòÏä§',
            full_name: 'Ï†úÏ£º ÌåîÏΩòÏä§',
            region: 'Ï†úÏ£º',
            age_group: 'U15',
            home_venue: 'Ï†úÏ£º ÏïÑÏù¥Ïä§ÎßÅÌÅ¨',
            description: 'Ï†úÏ£º ÏßÄÏó≠Ïùò Ïú†ÏùºÌïú U15 ÌåÄÏúºÎ°ú ÏûêÏó∞ ÏπúÌôîÏ†Å',
            coach: 'Î∞ïÏ†úÏ£º',
            captain: 'ÍπÄÏ†úÏ£º',
            founded: '2020-01-01',
            colors: JSON.stringify(['#059669', '#FFFFFF'])
        }
    ],
    
    // ÏÉòÌîå Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 3Í∞úÏõî)
    matches: [
        { team1_id: 1, team2_id: 4, team1_score: 3, team2_score: 2, match_date: '2024-12-01', status: 'completed' },
        { team1_id: 2, team2_id: 6, team1_score: 1, team2_score: 4, match_date: '2024-12-02', status: 'completed' },
        { team1_id: 3, team2_id: 7, team1_score: 2, team2_score: 2, match_date: '2024-12-03', status: 'completed' },
        { team1_id: 1, team2_id: 8, team1_score: 4, team2_score: 1, match_date: '2024-12-05', status: 'completed' },
        { team1_id: 4, team2_id: 2, team1_score: 0, team2_score: 3, match_date: '2024-12-07', status: 'completed' },
        { team1_id: 6, team2_id: 3, team1_score: 2, team2_score: 1, match_date: '2024-12-10', status: 'completed' },
        { team1_id: 5, team2_id: 7, team1_score: 1, team2_score: 1, match_date: '2024-12-12', status: 'completed' },
        { team1_id: 1, team2_id: 2, team1_score: 2, team2_score: 3, match_date: '2024-12-15', status: 'completed' },
        { team1_id: 4, team2_id: 6, team1_score: 1, team2_score: 2, match_date: '2024-12-18', status: 'completed' },
        { team1_id: 3, team2_id: 5, team1_score: 3, team2_score: 0, match_date: '2024-12-20', status: 'completed' },
        { team1_id: 8, team2_id: 7, team1_score: 2, team2_score: 1, match_date: '2024-12-22', status: 'completed' },
        { team1_id: 1, team2_id: 6, team1_score: 1, team2_score: 1, match_date: '2024-12-25', status: 'completed' }
    ]
};

// ÌåÄ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
const seedTeams = async () => {
    try {
        console.log('üå± Seeding teams...');
        
        for (const team of seedData.teams) {
            const query = `
                INSERT INTO teams (
                    team_name, full_name, region, age_group, home_venue, 
                    description, coach, captain, founded, colors
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `;
            
            const values = [
                team.team_name, team.full_name, team.region, team.age_group,
                team.home_venue, team.description, team.coach, team.captain,
                team.founded, team.colors
            ];
            
            await executeQuery(query, values);
        }
        
        console.log('‚úÖ Teams seeded successfully');
    } catch (error) {
        console.error('‚ùå Error seeding teams:', error.message);
        throw error;
    }
};

// Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
const seedMatches = async () => {
    try {
        console.log('üå± Seeding matches...');
        
        for (const match of seedData.matches) {
            const query = `
                INSERT INTO matches (
                    team1_id, team2_id, team1_score, team2_score, 
                    match_date, status, season
                ) VALUES (?, ?, ?, ?, ?, ?, '2024')
            `;
            
            const values = [
                match.team1_id, match.team2_id, match.team1_score, 
                match.team2_score, match.match_date, match.status
            ];
            
            await executeQuery(query, values);
        }
        
        console.log('‚úÖ Matches seeded successfully');
    } catch (error) {
        console.error('‚ùå Error seeding matches:', error.message);
        throw error;
    }
};

// ÌåÄ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ Î∞è ÏÇΩÏûÖ
const calculateAndSeedTeamStats = async () => {
    try {
        console.log('üå± Calculating and seeding team stats...');
        
        // Í∞Å ÌåÄÏùò ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const teams = await executeQuery('SELECT team_id FROM teams');
        
        for (const team of teams) {
            const { team_id } = team;
            
            // ÌôàÍ≤ΩÍ∏∞ ÌÜµÍ≥Ñ
            const homeStats = await executeQuery(`
                SELECT 
                    COUNT(*) as total_home,
                    SUM(CASE WHEN team1_score > team2_score THEN 1 ELSE 0 END) as home_wins,
                    SUM(CASE WHEN team1_score < team2_score THEN 1 ELSE 0 END) as home_losses,
                    SUM(CASE WHEN team1_score = team2_score THEN 1 ELSE 0 END) as home_draws,
                    SUM(team1_score) as home_goals_for,
                    SUM(team2_score) as home_goals_against
                FROM matches 
                WHERE team1_id = ? AND status = 'completed'
            `, [team_id]);
            
            // ÏõêÏ†ïÍ≤ΩÍ∏∞ ÌÜµÍ≥Ñ
            const awayStats = await executeQuery(`
                SELECT 
                    COUNT(*) as total_away,
                    SUM(CASE WHEN team2_score > team1_score THEN 1 ELSE 0 END) as away_wins,
                    SUM(CASE WHEN team2_score < team1_score THEN 1 ELSE 0 END) as away_losses,
                    SUM(CASE WHEN team2_score = team1_score THEN 1 ELSE 0 END) as away_draws,
                    SUM(team2_score) as away_goals_for,
                    SUM(team1_score) as away_goals_against
                FROM matches 
                WHERE team2_id = ? AND status = 'completed'
            `, [team_id]);
            
            // Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Ìï©Í≥Ñ
            const home = homeStats[0];
            const away = awayStats[0];
            
            const totalMatches = (home.total_home || 0) + (away.total_away || 0);
            const wins = (home.home_wins || 0) + (away.away_wins || 0);
            const losses = (home.home_losses || 0) + (away.away_losses || 0);
            const draws = (home.home_draws || 0) + (away.away_draws || 0);
            const goalsFor = (home.home_goals_for || 0) + (away.away_goals_for || 0);
            const goalsAgainst = (home.home_goals_against || 0) + (away.away_goals_against || 0);
            const winRate = totalMatches > 0 ? ((wins / totalMatches) * 100).toFixed(2) : 0;
            const goalDifference = goalsFor - goalsAgainst;
            const points = (wins * 3) + (draws * 1); // ÏäπÏ†ê Í≥ÑÏÇ∞ (ÏäπÎ¶¨ 3Ï†ê, Î¨¥ÏäπÎ∂Ä 1Ï†ê)
            
            // ÌåÄ ÌÜµÍ≥Ñ ÏÇΩÏûÖ
            await executeQuery(`
                INSERT INTO team_stats (
                    team_id, season, total_matches, wins, losses, draws,
                    goals_for, goals_against, win_rate, goal_difference, points
                ) VALUES (?, '2024', ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ON DUPLICATE KEY UPDATE
                    total_matches = VALUES(total_matches),
                    wins = VALUES(wins),
                    losses = VALUES(losses),
                    draws = VALUES(draws),
                    goals_for = VALUES(goals_for),
                    goals_against = VALUES(goals_against),
                    win_rate = VALUES(win_rate),
                    goal_difference = VALUES(goal_difference),
                    points = VALUES(points)
            `, [team_id, totalMatches, wins, losses, draws, goalsFor, goalsAgainst, winRate, goalDifference, points]);
        }
        
        console.log('‚úÖ Team stats calculated and seeded successfully');
    } catch (error) {
        console.error('‚ùå Error calculating team stats:', error.message);
        throw error;
    }
};

// H2H ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ Î∞è ÏÇΩÏûÖ
const calculateAndSeedH2HStats = async () => {
    try {
        console.log('üå± Calculating and seeding H2H stats...');
        
        // Î™®Îì† ÌåÄ Ï°∞Ìï© Í∞ÄÏ†∏Ïò§Í∏∞
        const teams = await executeQuery('SELECT team_id FROM teams ORDER BY team_id');
        
        for (let i = 0; i < teams.length; i++) {
            for (let j = i + 1; j < teams.length; j++) {
                const team1_id = teams[i].team_id;
                const team2_id = teams[j].team_id;
                
                // Îëê ÌåÄ Í∞ÑÏùò Î™®Îì† Í≤ΩÍ∏∞ Ï°∞Ìöå
                const matches = await executeQuery(`
                    SELECT team1_id, team2_id, team1_score, team2_score, match_date
                    FROM matches 
                    WHERE ((team1_id = ? AND team2_id = ?) OR (team1_id = ? AND team2_id = ?))
                    AND status = 'completed'
                    ORDER BY match_date DESC
                `, [team1_id, team2_id, team2_id, team1_id]);
                
                if (matches.length > 0) {
                    let team1_wins = 0, team2_wins = 0, draws = 0;
                    let team1_goals = 0, team2_goals = 0;
                    const recentMatches = [];
                    
                    matches.forEach((match, index) => {
                        // ÌåÄ1 Í¥ÄÏ†êÏóêÏÑú Í≤∞Í≥º Í≥ÑÏÇ∞
                        let result, score1, score2;
                        
                        if (match.team1_id === team1_id) {
                            score1 = match.team1_score;
                            score2 = match.team2_score;
                        } else {
                            score1 = match.team2_score;
                            score2 = match.team1_score;
                        }
                        
                        if (score1 > score2) {
                            team1_wins++;
                            result = 'W';
                        } else if (score1 < score2) {
                            team2_wins++;
                            result = 'L';
                        } else {
                            draws++;
                            result = 'D';
                        }
                        
                        team1_goals += score1;
                        team2_goals += score2;
                        
                        // ÏµúÍ∑º 5Í≤ΩÍ∏∞Îßå Ï†ÄÏû•
                        if (index < 5) {
                            recentMatches.push({
                                date: match.match_date,
                                score: `${score1}:${score2}`,
                                result: result
                            });
                        }
                    });
                    
                    // H2H ÌÜµÍ≥Ñ ÏÇΩÏûÖ
                    await executeQuery(`
                        INSERT INTO h2h_stats (
                            team1_id, team2_id, team1_wins, team2_wins, draws,
                            total_matches, team1_goals, team2_goals, recent_matches, last_match_date
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        ON DUPLICATE KEY UPDATE
                            team1_wins = VALUES(team1_wins),
                            team2_wins = VALUES(team2_wins),
                            draws = VALUES(draws),
                            total_matches = VALUES(total_matches),
                            team1_goals = VALUES(team1_goals),
                            team2_goals = VALUES(team2_goals),
                            recent_matches = VALUES(recent_matches),
                            last_match_date = VALUES(last_match_date)
                    `, [
                        team1_id, team2_id, team1_wins, team2_wins, draws,
                        matches.length, team1_goals, team2_goals, 
                        JSON.stringify(recentMatches), matches[0].match_date
                    ]);
                }
            }
        }
        
        console.log('‚úÖ H2H stats calculated and seeded successfully');
    } catch (error) {
        console.error('‚ùå Error calculating H2H stats:', error.message);
        throw error;
    }
};

// Ï†ÑÏ≤¥ ÏãúÎî© Ïã§Ìñâ
const runSeed = async () => {
    try {
        console.log('üöÄ Starting database seeding...');
        
        await seedTeams();
        await seedMatches();
        await calculateAndSeedTeamStats();
        await calculateAndSeedH2HStats();
        
        console.log('üéâ Database seeding completed successfully!');
        process.exit(0);
    } catch (error) {
        console.error('üí• Database seeding failed:', error.message);
        process.exit(1);
    }
};

// Ïä§ÌÅ¨Î¶ΩÌä∏ ÏßÅÏ†ë Ïã§Ìñâ Ïãú
if (require.main === module) {
    runSeed();
}

module.exports = {
    seedTeams,
    seedMatches,
    calculateAndSeedTeamStats,
    calculateAndSeedH2HStats,
    runSeed
};
